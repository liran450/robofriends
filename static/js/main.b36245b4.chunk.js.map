{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchBar","onChange","type","placeholder","Scroll","props","style","overflowY","borderTop","height","children","errorBoundary","state","hasError","error","info","this","setState","Component","App","changeSearch","event","searchfield","target","value","console","log","fetch","then","response","json","users","filteredRobot","filter","robot","toLowerCase","includes","length","ErrorBoundary","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCDSC,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,GAAGC,IAAG,+BAA0BH,EAA1B,aACf,6BACC,4BAAKF,GACL,2BAAIC,MCIOK,EAXE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GACnC,OAAQ,kBAAC,EAAD,CAAMC,IAAMF,EAAKR,GAAIA,GAAIK,EAAOI,GAAGT,GAAID,MAAOM,EAAOI,GAAGV,MAAOD,KAAMO,EAAOI,GAAGX,UAExF,OACC,6BACEQ,ICKWK,EAZG,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACpB,OACC,yBAAKX,UAAU,OACf,2BAAOY,SAAUD,EACjBX,UAAU,mCACVa,KAAK,SACLC,YAAY,oBCEEC,G,MARA,SAACC,GACf,OACC,yBAAKC,MAAQ,CAACC,UAAW,SAAUC,UAAW,kBAAmBC,OAAQ,UACxEJ,EAAMK,YCkBMC,E,kDAnBd,aAAe,IAAD,8BACb,gBACKC,MAAQ,CACZC,UAAU,GAHE,E,8DAOIC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACP,wDAEDG,KAAKX,MAAMK,a,GAhBQQ,aC8CbC,E,kDAzCd,aAAe,IAAD,8BACb,gBAcDC,aAAe,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,QACzCC,QAAQC,IAAI,EAAKd,MAAMU,cAftB,EAAKV,MAAQ,CACbnB,OAAQ,GACR6B,YAAa,IAJA,E,gEAQO,IAAD,OACnBK,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OACdA,EAASC,UACRF,MAAK,SAAAG,GAAK,OAAI,EAAKd,SAAS,CAACxB,OAAQsC,S,+BAQ9B,IAAD,EACuBf,KAAKJ,MAA7BnB,EADC,EACDA,OAAQ6B,EADP,EACOA,YACVU,EAAgBvC,EAAOwC,QAAO,SAACC,GACpC,OAAOA,EAAMhD,KAAKiD,cAAcC,SAASd,EAAYa,kBAEtD,OAAQ1C,EAAO4C,OAGb,yBAAKhD,UAAW,MACf,wBAAIA,UAAW,MAAf,eACA,kBAAC,EAAD,CAAWW,UAAWgB,KAAKI,eAC3B,kBAAC,EAAD,KACC,kBAACkB,EAAD,KACC,kBAAC,EAAD,CAAU7C,OAAQuC,OAPvB,wBAAI3C,UAAW,MAAf,e,GA3BiB6B,aCClBqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLW,QAAQX,MAAMA,EAAMoC,a","file":"static/js/main.b36245b4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='' src={`https://robohash.org/${id}200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst cardArray = robots.map((user, i) => {\r\n\t\treturn (<Card key= {user.id} id={robots[i].id} email={robots[i].email} name={robots[i].name}/>\r\n\t)});\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardArray}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchBar}) => {\r\nreturn(\r\n\t<div className='pa2'>\r\n\t<input onChange={searchBar}\r\n\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\ttype='search' \r\n\tplaceholder='Search Robots' \r\n\t/>\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style= {{overflowY: 'scroll', borderTop: '5px solid black', height: '800px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll","import React, {Component} from 'react';\r\n\r\n\r\nclass errorBoundary extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooops. That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default errorBoundary","import React, {Component} from 'react'\r\nimport CardList from '../Components/CardList'\r\nimport SearchBox from '../Components/SearchBox'\r\nimport './App.css'\r\nimport Scroll from '../Components/Scroll'\r\nimport ErrorBoundary from '../Components/ErrorBoundary'\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\trobots: [],\r\n\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response=>\r\n\t\t\tresponse.json())\r\n\t\t\t.then(users => this.setState({robots: users}));\r\n\t}\r\n   \r\n\tchangeSearch = (event) => {\r\n\tthis.setState({searchfield: event.target.value}) \r\n\tconsole.log(this.state.searchfield);\r\n\t}\r\n\r\n\trender (){\r\n\tconst { robots, searchfield } = this.state; \r\n\tconst filteredRobot = robots.filter((robot) => {\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t});\r\n\treturn !robots.length ?\r\n\t<h1 className= 'tc'>Loading</h1> :\r\n\t(\r\n\t\t\t<div className= 'tc'>\r\n\t\t\t\t<h1 className= 'f2'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchBar={this.changeSearch} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={filteredRobot}/>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport App from './Containers/App'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}